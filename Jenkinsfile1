pipeline {
    agent any

    environment {
        REGION = "us-east1"
        PROJECT_ID = "iyaawu-platform"
        REPOSITORY_NAME = "cayvibes"
        USER= "prosperagada"
        IP_ADDRESS= "34.46.94.122"
        IMAGE_NAME_1 = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY_NAME}/${REPOSITORY_NAME}-api:${env.BUILD_NUMBER}"
        IMAGE_NAME_2 = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY_NAME}/${REPOSITORY_NAME}-celebrity:${env.BUILD_NUMBER}"
        IMAGE_NAME_3 = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY_NAME}/${REPOSITORY_NAME}-fan:${env.BUILD_NUMBER}"
        IMAGE_NAME_4 = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY_NAME}/${REPOSITORY_NAME}-ngo:${env.BUILD_NUMBER}"
        IMAGE_NAME_5 = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY_NAME}/${REPOSITORY_NAME}-notification:${env.BUILD_NUMBER}"
        BITBUCKET_CREDENTIALS_ID = 'bitbucket-oauth-token'
        PATH = "/google-cloud-sdk/bin:/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        KUBE_CLUSTER_NAME='cayvibes-cluster'
        KUBE_ZONE='us-east1-d'
        KUBE_NAMESPACE = 'default'
        HELM_CHART_PATH = './k8s/helm-deploy/'
        HELM_RELEASE_NAME = 'cayvibes-deployment'
       
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    def repos = [
                        [url: 'https://bitbucket.org/Lafiyatelehealth/cayvibes-api-gateway.git', dir: 'workspace1'],
                        [url: 'https://bitbucket.org/Lafiyatelehealth/cayvibes-celebrity-service.git', dir: 'workspace2'],
                        [url: 'https://bitbucket.org/Lafiyatelehealth/cayvibes-fan-service.git', dir: 'workspace3'],
                        [url: 'https://bitbucket.org/Lafiyatelehealth/cayvibes-ngo-service.git', dir: 'workspace4'],
                        [url: 'https://bitbucket.org/Lafiyatelehealth/cayvibes-notification-service.git', dir: 'workspace5']
                    ]

                    def branches = 'refs/heads/main'

                    try {
                        parallel repos.collectEntries { repo ->
                            ["Checkout ${repo.dir}": {
                                dir(repo.dir) {
                                    checkout([$class: 'GitSCM',
                                        branches: [[name: branches]],
                                        userRemoteConfigs: [[
                                            url: repo.url,
                                            credentialsId: BITBUCKET_CREDENTIALS_ID
                                        ]]
                                    ])
                                }
                            }]
                        }
                    } catch (err) {
                        echo "Checkout failed: ${err}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping early due to checkout failure.")
                    }
                }
            }
        }
        stage('Auth with Google Cloud') {
        steps {
            sh ("gcloud auth activate-service-account --key-file=/iyaawu-platform-e7978bf7e8e6.json")
            sh ("gcloud config set project ${PROJECT_ID}")

        }
        }
        stage('Configure Docker with gcloud') {
            steps {
                sh "gcloud auth configure-docker ${REGION}-docker.pkg.dev"
            }
        }
                
        stage('Image Build') {
            parallel {
                stage('Build Docker Image') {
                    steps {
                        script {
                            try {
                                dir('workspace1') {
                                    image = docker.build("$IMAGE_NAME_1")
                                }
                            } catch (err) {
                                echo "Build Image 1 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to build failure.")                        
                            }
                            
                        }
                    }
                }
                stage('Build Image 2') {
                    steps {
                        script {
                            try {
                                dir('workspace2') {
                                    image = docker.build("${IMAGE_NAME_2}")
                                }
                            } catch (err) {
                                echo "Build Image 2 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to build failure.")
                            }
                        }
                    }
                }
                stage('Build Image 3') {
                    steps {
                        script {
                            try {
                                dir('workspace3') {
                                    image = docker.build("${IMAGE_NAME_3}")
                                }
                            } catch (err) {
                                echo "Build Image 3 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to build failure.")
                            }
                        }
                    }
                }
                stage('Build Image 4') {
                    steps {
                        script {
                            try {
                                dir('workspace4') {
                                   image = docker.build("${IMAGE_NAME_4}")
                                }
                            } catch (err) {
                                echo "Build Image 4 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to build failure.")
                            }
                        }
                    }
                }
                // stage('Build Image 5') {
                //     steps {
                //         script {
                //             try {
                //                 dir('workspace5') {
                //                     image = docker.build("${IMAGE_NAME_5}")
                //                 }
                //             } catch (err) {
                //                 echo "Build Image 5 failed: ${err}"
                //                 currentBuild.result = 'FAILURE'
                //                 error("Stopping early due to build failure.")
                //             }
                //         }
                //     }
                // }
            }
        }

        stage('Push to Artifact Registry') {
            parallel {
                stage('Push Image 1') {
                    steps {
                        script {
                            try {
                                image = docker.image("${IMAGE_NAME_1}")
                                image.push()
                                
                            } catch (err) {
                                echo "Push Image 1 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to push failure.")
                                
                            }
                        }
                    }
                }
                stage('Push Image 2') {
                    steps {
                        script {
                            try {
                                image = docker.image("${IMAGE_NAME_2}")
                                image.push()
                                
                            } catch (err) {
                                echo "Push Image 2 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to push failure.")
                            }
                        }
                    }
                }
                stage('Push Image 3') {
                    steps {
                        script {
                            try {
                                image = docker.image("${IMAGE_NAME_3}")
                                image.push()
                                
                            } catch (err) {
                                echo "Push Image 3 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to push failure.")
                            }
                        }
                    }
                }
                stage('Push Image 4') {
                    steps {
                        script {
                            try {
                                image = docker.image("${IMAGE_NAME_4}")
                                image.push()
                                
                            } catch (err) {
                                echo "Push Image 4 failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                error("Stopping early due to push failure.")
                            }
                        }
                    }
                }
                // stage('Push Image 5') {
                //     steps {
                //         script {
                //             try {
                //                 docker.withRegistry("https://${IMAGE_BASE}", 'gcr:jenkins-gcr-auth') {
                //                     docker.image("${IMAGE_NAME_5}").push()
                //                 }
                //             } catch (err) {
                //                 echo "Push Image 5 failed: ${err}"
                //                 currentBuild.result = 'FAILURE'
                //                 error("Stopping early due to push failure.")
                //             }
                //         }
                //     }
                // }
            }
        }
        // stage('Deploy on compose cluster'){
        //     steps{
        //         script{
        //             def ShellCmd = "bash ./script.sh ${IMAGE_NAME_1} ${IMAGE_NAME_2} ${IMAGE_NAME_3} ${IMAGE_NAME_4} ${IMAGE_NAME_5}"
        //             sshagent(['jenkins-ssh-key']) {
        //                 sh "scp -o StrictHostKeyChecking=no docker-compose.yml ${USER}@${IP_ADDRESS}:/home/prosperagada"
        //                 sh "scp -o StrictHostKeyChecking=no script.sh ${USER}@${IP_ADDRESS}:/home/prosperagada"
        //                 sh "ssh -o StrictHostKeyChecking=no ${USER}@${IP_ADDRESS} ${ShellCmd}"
        //                 echo "SUCCESS"
        //             }
        //         }
        //     }
        // }

        stage("Deploy on GKE") {
            steps{
                script{
                    sh ("gcloud components install gke-gcloud-auth-plugin")
                    sh ("gcloud container clusters get-credentials ${KUBE_CLUSTER_NAME} --zone=${KUBE_ZONE} --project=${PROJECT_ID}")
                    sh """
                    helm upgrade --install ${HELM_RELEASE_NAME} ${HELM_CHART_PATH} --namespace ${KUBE_NAMESPACE} --values ./k8s/helm-deploy/values.yaml \
                    --set api_image.name=${IMAGE_NAME_1} \
                    --set celebrity_image.name=${IMAGE_NAME_2} \
                    --set fan_image.name=${IMAGE_NAME_3} \
                    --set ngo_image.name=${IMAGE_NAME_4}
                    """
                }
            }
        }
    }
}

